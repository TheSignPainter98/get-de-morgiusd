#!/usr/bin/moon

local *

import C, P, R, V from require 'lpeg'
import concat from table

is_list = (l) ->
	type = type
	if (type l) != 'table'
		return false
	maxk = -1
	for k,_ in pairs l
		if (type k) != 'number'
			return false
		maxk = k if maxk < k
	maxk == #l

show = (v) ->
	switch type v
		when 'boolean', 'nil', 'number', 'thread'
			tostring(v)
		when 'function', 'userdata'
			"(#{tostring(v)})"
		when 'string'
			"'#{v}'"
		when 'table'
			if 'function' == type v.show
				return v\show!
			if is_list v
				return '[' .. (concat [ show e for e in *v ], ',') .. ']'
			return '{' .. (concat [ (show e) .. ':' .. show val for e,val in pairs v ], ',') .. '}'
		else
			error 'Unknown type', type v

class Parser
	new: => @grammar = @grammar!
	parse: (raw) => @grammar\match raw .. '\0'
	grammar: => P {
		"ExprInput",
		ExprInput: V'Expr' * '\0'
		Expr: V'Disjunction'
		Disjunction: (V'Conjunction' * (C'|' * V'Conjunction')^0) / @binop
		Conjunction: (V'Term' * (C'&' * V'Term')^0) / @binop
		Term: (V'Negation' + V'Var' + V'Parenth')
		Negation: C'!' * (V'Term') / @uniop
		Parenth: ('(' * V'Disjunction' * ')') / @parenth
		Var: (R'az' + R'AZ' + R'09')^1 / @var
	}
	repr: => @expr\repr!

	binop: (l, op, ...) ->
		return l unless op
		args = {...}
		{
			type: 'binop'
			:op
			exprs: with {l}
				i = 2
				for o in *args[,,2]
					[i] = o
					i += 1
		}
	uniop: (op, expr) -> type: 'uniop', :op, :expr
	parenth: (expr) -> type: 'parenth', :expr
	var: (var) -> type: 'var', :var

opmap = { '|': '&', '&': '|' }
demorg = (expr) ->
	switch expr.type
		when 'parenth'
			type: 'parenth', expr: demorg expr.expr
		when 'uniop'
			type: 'uniop', op: expr.op, expr: demorg expr.expr
		when 'binop'
			switch expr.op
				when '|', '&'
					ret = {
						type: 'binop'
						op: opmap[expr.op]
						exprs: [ { type: 'uniop', op: '!', expr: demorg e } for e in *expr.exprs ]
					}
					if expr.op == '&'
						ret = {
							type: 'parenth'
							expr: ret
						}
					ret
				else
					error "Unknown binary op: #{expr.op}"
		when 'var'
			expr
		else
			error "Unknown expression type #{expr.type}: #{show expr}"

show_expr = (expr) ->
	builder = {}
	expr_repr = (expr) ->
		switch expr.type
			when 'var'
				builder[#builder+1] = expr.var
			when 'uniop'
				builder[#builder+1] = expr.op
				expr_repr expr.expr
			when 'binop'
				expr_repr expr.exprs[1]
				for operand in *expr.exprs[2,]
					builder[#builder+1] = " #{expr.op} "
					expr_repr operand
			when 'parenth'
				builder[#builder+1] = '('
				expr_repr expr.expr
				builder[#builder+1] = ')'
			else
				error "Unknown show_expr node type #{expr.type} in #{show expr}"
	expr_repr expr
	concat builder

main = (args) ->
	parser = Parser!
	expr = parser\parse concat args
	print show_expr demorg expr

main {...}
